{
  "version": 3,
  "sources": [
    "unknown"
  ],
  "names": [
    "cc",
    "Class",
    "extends",
    "Component",
    "properties",
    "jumpHeight",
    "jumpDuration",
    "maxMoveSpeed",
    "accel",
    "setJumpAction",
    "jumpUp",
    "moveBy",
    "p",
    "easing",
    "easeCubicActionOut",
    "jumpDown",
    "easeCubicActionIn",
    "repeatForever",
    "sequence",
    "setInputControl",
    "self",
    "eventManager",
    "addListener",
    "event",
    "EventListener",
    "KEYBOARD",
    "onKeyPressed",
    "keyCode",
    "KEY",
    "a",
    "accLeft",
    "accRight",
    "d",
    "onKeyReleased",
    "node",
    "onLoad",
    "jumpAction",
    "runAction",
    "xSpeed",
    "update",
    "dt",
    "Math",
    "abs",
    "x"
  ],
  "mappings": ";;AAAAA,GAAGC,KAAH,CAAS;AACLC,aAASF,GAAGG,SADP;;AAGLC,gBAAY;AACR;AACAC,oBAAY,CAFJ;AAGR;AACAC,sBAAc,CAJN;AAKR;AACAC,sBAAc,CANN;AAOR;AACAC,eAAO;AARC,KAHP;;AAcLC,mBAAe,yBAAY;AACvB;AACA,YAAIC,SAASV,GAAGW,MAAH,CAAU,KAAKL,YAAf,EAA6BN,GAAGY,CAAH,CAAK,CAAL,EAAQ,KAAKP,UAAb,CAA7B,EAAuDQ,MAAvD,CAA8Db,GAAGc,kBAAH,EAA9D,CAAb;AACA;AACA,YAAIC,WAAWf,GAAGW,MAAH,CAAU,KAAKL,YAAf,EAA6BN,GAAGY,CAAH,CAAK,CAAL,EAAQ,CAAC,KAAKP,UAAd,CAA7B,EAAwDQ,MAAxD,CAA+Db,GAAGgB,iBAAH,EAA/D,CAAf;AACA;AACA,eAAOhB,GAAGiB,aAAH,CAAiBjB,GAAGkB,QAAH,CAAYR,MAAZ,EAAoBK,QAApB,CAAjB,CAAP;AACH,KArBI;;AAuBLI,qBAAiB,2BAAY;AACzB,YAAIC,OAAO,IAAX;AACA;AACApB,WAAGqB,YAAH,CAAgBC,WAAhB,CAA4B;AACxBC,mBAAOvB,GAAGwB,aAAH,CAAiBC,QADA;AAExB;AACAC,0BAAc,sBAASC,OAAT,EAAkBJ,KAAlB,EAAyB;AACnC,wBAAOI,OAAP;AACI,yBAAK3B,GAAG4B,GAAH,CAAOC,CAAZ;AACIT,6BAAKU,OAAL,GAAe,IAAf;AACAV,6BAAKW,QAAL,GAAgB,KAAhB;AACA;AACJ,yBAAK/B,GAAG4B,GAAH,CAAOI,CAAZ;AACIZ,6BAAKU,OAAL,GAAe,KAAf;AACAV,6BAAKW,QAAL,GAAgB,IAAhB;AACA;AARR;AAUH,aAduB;AAexB;AACAE,2BAAe,uBAASN,OAAT,EAAkBJ,KAAlB,EAAyB;AACpC,wBAAOI,OAAP;AACI,yBAAK3B,GAAG4B,GAAH,CAAOC,CAAZ;AACIT,6BAAKU,OAAL,GAAe,KAAf;AACA;AACJ,yBAAK9B,GAAG4B,GAAH,CAAOI,CAAZ;AACIZ,6BAAKW,QAAL,GAAgB,KAAhB;AACA;AANR;AAQH;AAzBuB,SAA5B,EA0BGX,KAAKc,IA1BR;AA2BH,KArDI;;AAuDL;AACAC,YAAQ,kBAAY;AAChB,aAAKC,UAAL,GAAkB,KAAK3B,aAAL,EAAlB;AACA,aAAKyB,IAAL,CAAUG,SAAV,CAAoB,KAAKD,UAAzB;;AAEA;AACA,aAAKN,OAAL,GAAe,KAAf;AACA,aAAKC,QAAL,GAAgB,KAAhB;AACA;AACA,aAAKO,MAAL,GAAc,CAAd;;AAEA;AACA,aAAKnB,eAAL;AACH,KApEI;;AAsEL;AACAoB,YAAQ,gBAAUC,EAAV,EAAc;AAClB;AACA,YAAI,KAAKV,OAAT,EAAkB;AACd,iBAAKQ,MAAL,IAAe,KAAK9B,KAAL,GAAagC,EAA5B;AACH,SAFD,MAEO,IAAI,KAAKT,QAAT,EAAmB;AACtB,iBAAKO,MAAL,IAAe,KAAK9B,KAAL,GAAagC,EAA5B;AACH;AACD;AACA,YAAKC,KAAKC,GAAL,CAAS,KAAKJ,MAAd,IAAwB,KAAK/B,YAAlC,EAAiD;AAC7C;AACA,iBAAK+B,MAAL,GAAc,KAAK/B,YAAL,GAAoB,KAAK+B,MAAzB,GAAkCG,KAAKC,GAAL,CAAS,KAAKJ,MAAd,CAAhD;AACH;;AAED;AACA,aAAKJ,IAAL,CAAUS,CAAV,IAAe,KAAKL,MAAL,GAAcE,EAA7B;AACH;AAtFI,CAAT",
  "file": "unknown",
  "sourcesContent": [
    "cc.Class({\n    extends: cc.Component,\n\n    properties: {\n        // main character's jump height\n        jumpHeight: 0,\n        // main character's jump duration\n        jumpDuration: 0,\n        // maximal movement speed\n        maxMoveSpeed: 0,\n        // acceleration\n        accel: 0,\n    },\n    \n    setJumpAction: function () {\n        // jump up\n        var jumpUp = cc.moveBy(this.jumpDuration, cc.p(0, this.jumpHeight)).easing(cc.easeCubicActionOut());\n        // jump down\n        var jumpDown = cc.moveBy(this.jumpDuration, cc.p(0, -this.jumpHeight)).easing(cc.easeCubicActionIn());\n        // repeat\n        return cc.repeatForever(cc.sequence(jumpUp, jumpDown));\n    },\n\n    setInputControl: function () {\n        var self = this;\n        // add keyboard event listener\n        cc.eventManager.addListener({\n            event: cc.EventListener.KEYBOARD,\n            // When there is a key being pressed down, judge if it's the designated directional button and set up acceleration in the corresponding direction\n            onKeyPressed: function(keyCode, event) {\n                switch(keyCode) {\n                    case cc.KEY.a:\n                        self.accLeft = true;\n                        self.accRight = false;\n                        break;\n                    case cc.KEY.d:\n                        self.accLeft = false;\n                        self.accRight = true;\n                        break;\n                }\n            },\n            // when releasing the button, stop acceleration in this direction\n            onKeyReleased: function(keyCode, event) {\n                switch(keyCode) {\n                    case cc.KEY.a:\n                        self.accLeft = false;\n                        break;\n                    case cc.KEY.d:\n                        self.accRight = false;\n                        break;\n                }\n            }\n        }, self.node);\n    },\n\n    // use this for initialization\n    onLoad: function () {\n        this.jumpAction = this.setJumpAction();\n        this.node.runAction(this.jumpAction);\n        \n        // switch of acceleration direction\n        this.accLeft = false;\n        this.accRight = false;\n        // current horizontal speed of main character\n        this.xSpeed = 0;\n\n        // initialize keyboard input listener\n        this.setInputControl();\n    },\n\n    // called every frame, uncomment this function to activate update callback\n    update: function (dt) {\n        // update speed of each frame according to the current acceleration direction\n        if (this.accLeft) {\n            this.xSpeed -= this.accel * dt;\n        } else if (this.accRight) {\n            this.xSpeed += this.accel * dt;\n        }\n        // restrict the movement speed of the main character to the maximum movement speed\n        if ( Math.abs(this.xSpeed) > this.maxMoveSpeed ) {\n            // if speed reaches its limit, use the max speed with current direction\n            this.xSpeed = this.maxMoveSpeed * this.xSpeed / Math.abs(this.xSpeed);\n        }\n\n        // update the position of the main character according to the current speed\n        this.node.x += this.xSpeed * dt;\n    },\n});\n"
  ]
}